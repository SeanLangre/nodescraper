import got from 'got';
import { JSDOM } from 'jsdom';
import puppeteer from 'puppeteer';
import datas from './data.json';

const actionType = 'Auction'
const sortBy = 'sortBy=TimeLeft'

// function getCurrentURL(index){
// 	data.list.forEach(element => {
// 		console.log(element);
// 	});
// }


async function headlessBrowser() {
	const browser = await puppeteer.launch({
	});
	// const browser = await puppeteer.launch({
	// 	devtools: true,
	// 	headless: false
	// });
	const page = await browser.newPage();

	for (const data of datas.list) {
		let url = getURL(data.searchterm, actionType);
		console.log(url)

		await page.goto(url);
		await page.waitForSelector('.site-pagename-SearchResults ');

		const links = await page.$$eval('a', a => a.filter(element => {
			// debugger;
			if (element.title !== '') {
				return element
			}
		}).map(ahref => ahref.title));

		// const options = await page.$$eval('a', options => {
		// 	return options.map(option => new JSDOM(option.innerHTML))
		// });
		console.log('asd')

		const options = await page.$$eval('a', () => {
			console.log('asd')
			return await options.map(option => new JSDOM(option.innerHTML))
		});
		console.log('options')


		// let keywordedList = []

		// for (let index = 0; index < links.length; index++) {
		// 	let link = links[index]
		// 	lowerCaseTitle = link.title.toLowerCase()
		// 	for (const word of data.keywords) {
		// 		if (lowerCaseTitle.includes(word)) {
		// 			keywordedList.push(link)
		// 		}
		// 	}
		// }
		// for (const link of links) {
		// 	lowerCaseTitle = link.title.toLowerCase()
		// 	for (const word of data.keywords) {
		// 		if (lowerCaseTitle.includes(word)) {
		// 			keywordedList.push(link)
		// 		}
		// 	}
		// }

		// const divs = await page.$$eval('a', a => a.filter(element => {
		// 	if (element.title !== '') {
		// 		//TODO. make title lowercase
		// 		lowerCaseTitle = element.title.toLowerCase()

		// 		//for (const word of keywords) {
		// 		//	if (lowerCaseTitle.includes(word)) {
		// 		return element
		// 		//	}
		// 		//}
		// 	}
		// }).map(ahref => ahref.title));


		//console.log(keywordedList)
	}

	await browser.close();
}

function getURL(name, actionType) {
	return `https://www.tradera.com/search?q=${name}&itemType=${actionType}&${sortBy}`;
}

async function searchPage(page, data) {
	// await page.focus('#site-header-search-input-')
	// await page.keyboard.type('Arkham Horror')
	// await page.keyboard.press('Enter');

	await page.waitForSelector('.site-pagename-SearchResults ');

	// await page.focus('#filter-itemType-Auction')

	// await page.waitForSelector('#btn d-flex align-items-center py-2 text-left px-1 cursor-pointer unbutton')

	const divs = await page.$$eval('a', a => a.filter(element => {
		if (element.title !== '') {
			return element
		}
	}).map(ahref => ahref.title));

	console.log(divs)
}

await headlessBrowser()